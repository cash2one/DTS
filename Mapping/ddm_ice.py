# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `ddm.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module phone
_M_phone = Ice.openModule('phone')
__name__ = 'phone'

if 'PhoneService' not in _M_phone.__dict__:
    _M_phone.PhoneService = Ice.createTempClass()
    class PhoneService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_phone.PhoneService:
                raise RuntimeError('phone.PhoneService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::phone::PhoneService')

        def ice_id(self, current=None):
            return '::phone::PhoneService'

        def ice_staticId():
            return '::phone::PhoneService'
        ice_staticId = staticmethod(ice_staticId)

        def uploadPhoneNumber(self, priority, strategy, phoneNumber, projectName, current=None):
            pass

        def downloadResult(self, taskId, mode, projectName, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_phone._t_PhoneService)

        __repr__ = __str__

    _M_phone.PhoneServicePrx = Ice.createTempClass()
    class PhoneServicePrx(Ice.ObjectPrx):

        def uploadPhoneNumber(self, priority, strategy, phoneNumber, projectName, _ctx=None):
            return _M_phone.PhoneService._op_uploadPhoneNumber.invoke(self, ((priority, strategy, phoneNumber, projectName), _ctx))

        def begin_uploadPhoneNumber(self, priority, strategy, phoneNumber, projectName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_phone.PhoneService._op_uploadPhoneNumber.begin(self, ((priority, strategy, phoneNumber, projectName), _response, _ex, _sent, _ctx))

        def end_uploadPhoneNumber(self, _r):
            return _M_phone.PhoneService._op_uploadPhoneNumber.end(self, _r)

        def downloadResult(self, taskId, mode, projectName, _ctx=None):
            return _M_phone.PhoneService._op_downloadResult.invoke(self, ((taskId, mode, projectName), _ctx))

        def begin_downloadResult(self, taskId, mode, projectName, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_phone.PhoneService._op_downloadResult.begin(self, ((taskId, mode, projectName), _response, _ex, _sent, _ctx))

        def end_downloadResult(self, _r):
            return _M_phone.PhoneService._op_downloadResult.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_phone.PhoneServicePrx.ice_checkedCast(proxy, '::phone::PhoneService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_phone.PhoneServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::phone::PhoneService'
        ice_staticId = staticmethod(ice_staticId)

    _M_phone._t_PhoneServicePrx = IcePy.defineProxy('::phone::PhoneService', PhoneServicePrx)

    _M_phone._t_PhoneService = IcePy.defineClass('::phone::PhoneService', PhoneService, -1, (), True, False, None, (), ())
    PhoneService._ice_type = _M_phone._t_PhoneService

    PhoneService._op_uploadPhoneNumber = IcePy.Operation('uploadPhoneNumber', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())
    PhoneService._op_downloadResult = IcePy.Operation('downloadResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_string, False, 0), ())

    _M_phone.PhoneService = PhoneService
    del PhoneService

    _M_phone.PhoneServicePrx = PhoneServicePrx
    del PhoneServicePrx

# End of module phone
